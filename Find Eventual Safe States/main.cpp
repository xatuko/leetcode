#include <iostream>
#include <vector>
#include <chrono>
#include <set>
#include <unordered_set>
// #include <q

using namespace std;

void safeNodes(unordered_set<int> & nodes, unordered_set<int> & term_nodes, vector<vector<int>> & graph)
{
    for (auto node : nodes)
    {
        int cnt = 0;
        for (int i = 0; i < graph[node].size(); i++, cnt++)
            if (term_nodes.find(graph[node][i]) == term_nodes.end())
                break;
        if (cnt == graph[node].size())
        {
            nodes.erase(node);
            term_nodes.insert(node);
            safeNodes(nodes, term_nodes, graph);
            return;
        }
    }

}

vector<int> eventualSafeNodes(vector<vector<int>>& graph)
{
    unordered_set<int> term_node;
    unordered_set<int> nodes;
    vector<int> result = { };

    for (size_t i = 0; i < graph.size(); i++)
    {
        if (graph[i].size() == 0)
            term_node.insert(i);
        else nodes.insert(i);
    }

    safeNodes(nodes, term_node, graph);

    if (term_node.size() == 0)
        return { };

    for (auto & el : term_node)
        result.push_back(el);

    std::qsort(result.data(), result.size(), sizeof(decltype(result)::value_type), [](const void* x, const void* y) {
            const int arg1 = *static_cast<const int*>(x);
            const int arg2 = *static_cast<const int*>(y);
            const auto cmp = arg1 - arg2;
            if (cmp < 0)
                return -1;
            if (cmp > 0)
                return 1;
            return 0;
        });
    return result;
}

int main(int, char**) {
    vector<vector<int>> in = {{104,130,164},{38,66,139},{86,106,116,155},{12,42,123},{153},{40,47,66,94,151},{18,29,87,125,127,193},{},{61,193},{89,115,136,177},{71,129},{111,120},{108,113,136,147,188,192},{44,91,98,113,186},{133},{140,152},{116,197},{80,110,193},{21,54,94,120,167,173},{81,94,112,114},{},{101},{66,122,164},{139,153,172},{34,84,181},{132},{},{126,136,196},{31,34,78,97,185},{55,68,98,192},{44,54,104,108,140,193},{99,153},{38,88,101,111,127,141},{24,42,76,177,180,182,199},{88,138,197},{38,185},{46,95,131,191},{},{60,162,187,198},{134},{54,60,63,70,146,159},{49,59,177},{174,185},{28,117,139,181,192},{41,66,79,81,107,195},{56,121,144,149,155,159},{119,187},{53,101,129,148,170,199},{60,66,145,159,166,195},{15,168},{136},{19},{53,58,79,120,181,193},{111,138},{72,137,142,180,184},{62,76,98,104,177},{88,165,182,196},{118,141},{76,81,164},{63,180,199},{121,142,182},{65,91,110},{96,101,102},{69,77,129,147,166,180},{},{74,75,88,121},{68,86,105,122,148,181},{107},{82,85,93},{83,92,134,153,163,176},{81,170,176},{97,131,141,144},{81,169,179},{},{184,194},{80,184,193},{174,193,197},{32},{106,119,120,154,172,198},{162,173},{98,136,150,152,185,193},{95,120,134,145,161},{87,95,160},{142,167},{166,169,174},{92,118,166,185,186},{90,113,123,135,149,192},{},{89,105,106,113,194},{184},{116,122,124,185,186},{100,134,178},{130,163,198},{17},{105,161,179,189,191,196},{57,116,194},{165,195},{54,105,167,195},{122,130,163,170,193,196},{},{120,143,145,151},{198},{120,149,161,179,186,191},{122,179,194},{140,169,193},{150},{129,196},{},{86,129,173,174},{152,153,160,177},{},{124,125,127,135,149,173},{140,156,187,191},{143,179},{159},{120,125,139,165,187},{124},{166,198},{126,131,143,146,182},{134,152,154,159},{127,136,163,179,182},{122,134,136,172,198},{140,147,175,180,188},{131,146,155,174},{133,143,173,178,191},{146,155,167,179,183},{146,152,181,188,195,196},{},{136,140,144,145,179,194},{193},{},{141,151,158},{186},{},{147,165},{137,168,170,171},{148,174,181,196,197},{140,142,144,155,158,194},{},{148,160},{143,195},{171,178,188,197},{147,150,168,169,177,189},{156,164},{162,165,167,184,188,194},{161},{},{148,189},{149,151,155},{122,167},{},{152,169,175,188,192},{180,187,188},{},{177},{156,168,181,193},{165,167,175,178,188,191},{},{160,167,177,179,187,198},{165,177,186,187},{168,180,193},{155},{167,176,185,196,199},{164,173,182},{174,179,182,191},{191,197},{172,178,188,189},{137,185,199},{179,187,191},{176,182,185},{144,174,175,182,184,193,195},{173,180,187,191,197},{},{177,187},{79,182,186,189,196},{176,182,186,190},{177,185},{199},{186,193},{182,183,189,194,198},{},{189,192,193,195,197,198},{},{188,189,191,192},{185,187,188,190,192,199},{191,194,199},{187,191,194,195,196,197},{188,193,195,197},{134,189,191,193},{190,193,194,197},{196},{192,193,196,198,199},{},{194,195,196,197,198,199},{196,197,199},{196,197,198,199},{198,199},{},{199},{}};
    // {{1,2},{2,3},{5},{0},{5},{},{}};
    auto start = std::chrono::steady_clock::now();
    auto res = eventualSafeNodes(in);
    std::cout << "Ns: " << std::chrono::duration_cast<std::chrono::nanoseconds>(std::chrono::steady_clock::now() - start).count() << std::endl;

    for (auto & el : res)
        std::cout << el << ' ';
    std::cout << std::endl;
    return 0;
}
